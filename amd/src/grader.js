// @flow
/*::
type Item = {
  id: number,
  itemname: number,
  itemtype: boolean,
  grademin: number,
  grademax: number,
  categoryid: string,
  aggregationcoef: number,
  itemtype: <manual|mod|category|course>,
  iteminstance: number // In the case than itemtype is category, iteminstace have the category parent id
};
*/
/*::
type AgregationEnum = {
    SIMPLE: 0,
    PONDERADO:10
}
 */
/*::
type Category = {
  id: number,
  fullname: string,
  depth: number,
  parent: number,
  grade_item: number, //id of the item asociated to this category
  aggregation: AgregationEnum
};
*/
/*::
type Column = {
    text: string
}
 */


/*::
type Student = {
  id: number,
  fistname: string,
  username: string, // moodle user name, in other words, student code
  lastname: string,
  gradeIds: array
};
*/
/*::
type Agregation = {
  id: number,
  name: string
};
*/
/*::
type EditItemResponse = {
    category: Category,
    levels: Array
}
*/

/*::
type Grade = {
  id: number,
  userid: number,
  itemid: number,
  rawgrademin: number,
  rawgrademax: number,
  finalgrade: string,
};
*/
// Generate unique IDs for use as pseudo-private/protected names.
// Similar in concept to
// <http://wiki.ecmascript.org/doku.php?id=strawman:names>.
//
// The goals of this function are twofold:
//
// * Provide a way to generate a string guaranteed to be unique when compared
//   to other strings generated by this function.
// * Make the string complex enough that it is highly unlikely to be
//   accidentally duplicated by hand (this is key if you're using `ID`
//   as a private/protected name on an object).
//
// Use:
//
//     var privateName = ID();
//     var o = { 'public': 'foo' };
//     o[privateName] = 'bar';

define([
        'local_customgrader/vendor-vue',
        'local_customgrader/vendor-vue-router',
        'local_customgrader/vendor-vuex',
        'local_customgrader/vendor-vue-resource',
        'local_customgrader/vendor-vue-js-modal',
        'local_customgrader/vendor-vue-flex',
        'local_customgrader/vendor-vue-toasted',
        'local_customgrader/vendor-loading-indicator',
        'local_customgrader/vendor-lodash',
        'local_customgrader/grader-store',
        'local_customgrader/grader-enums',
        'local_customgrader/grader-utils',
        'local_customgrader/grader-component-main',
        'local_customgrader/grader-router',
        'local_customgrader/grader-filters',
        'local_customgrader/grader-constants',
        'local_customgrader/Chart',
        'local_customgrader/vue-chartjs',
    ], function (
    Vue,
    VueRouter,
    Vuex,
    VueResource,
    VModal,
    VueFlex,
    VueToasted,
    loading_indicator,
    _,
    g_store,
    g_enums,
    g_utils,
    g_c_main,
    g_router,
    g_filters,
    g_const,
    g_chartjs,
    g_vuechartjs,){
        Vue.use(VueRouter);
        Vue.use(Vuex);
        Vue.use(VueResource);
        Vue.use(VModal.default, { dialog: true });
        Vue.use(VueFlex);
        Vue.use(VueToasted.default, {iconPack: 'custom-class'});
        var graderVueEvents = {
            UPDATE_CATEGORY_OK: 'updateCategoryOK',
            ADD_ELEMENT_OK: 'addElementOK'
        };

        var modalsEnum = {
            EDIT_CATEGORY : 'edit-category',
            EDIT_ITEM : 'edit-item',
            ADD_ELEMENT: 'add-element'
        };

        const categoryElement = { name: 'CATEGORÍA', id: 0 };
        const itemElement = { name: 'ÍTEM', id: 1 };
        const partialExamElement = { name: 'PARCIAL', id: 2 };
        const elementTypes = [categoryElement, itemElement, partialExamElement];

        var store = new Vuex.Store(g_store.store);
        var SelectAggregation = Vue.component('select-aggregation', {
            template: `
            <select 
            v-model="aggregation" 
            @change="changeAggregation($event)" 
            id="aggregation">
                <option 
                v-for="_aggregation in aggregations"
                v-bind:selected="_aggregation.id == aggregation"
                v-bind:value="_aggregation.id"
                >{{_aggregation.name}}</option>
            </select>
        `,
            props: ['initialAggregation'],
            data: function () {
                return {
                    aggregation: g_enums.aggregations.SIMPLE,
                    aggregations: g_const.aggregations
                }
            },
            created: function () {
                this.aggregation = this.initialAggregation? this.initialAggregation: this.aggregation;
            },
            methods: {
                changeAggregation($event) {
                    this.$emit('changeAggregation', $event.target.value);
                }
            }
        });
        var EditCategoryForm = Vue.component('edit-category-form', {
                // language=HTML
                template: `    
                <div style="width: 600px; height: 300px;" class="edit-category-form">
                    <form style="width: 570px; height: 270px;">
                        <h3 :style="{ 'text-align': 'center' }">Editando Categoría:</h3>
                        <br />
                        <label for="categoryFullName">
                            Nombre de la categoria:  
                        </label>
                        <input :disabled="isCourseCategory" id="categoryFullName" v-model="categoryFullName">
                        <br />
                        <label for="aggregation">
                        Tipo de calificación:
                        </label>
                        <select-aggregation 
                                v-bind:initialAggregation="category.aggregation"
                                v-on:changeAggregation="changeAggregation">
                        </select-aggregation>
                        <br />
                        <br />
                        <div style="text-align:center; bottom:50px;">
                                <button :style="boton" type="button" v-on:click="updateCategory">Guardar</button>
                        </div>
                    </form>
                </div>
            `
                ,
                data: function() {
                    return {
                        categoryFullName: '',
                        gradeTypeId: 0,
                        aggregations: g_const.aggregations,
                        boton: {
                            'background-color': '#cd1f32',
                            'color': 'white'
                        }
                    }
                },
                computed: {
                    ...Vuex.mapState(['selectedCategoryId']),
                    ...Vuex.mapGetters({
                        category: 'selectedCategory'
                    }),
                    isCourseCategory: function () {
                        return this.category.depth == 1;
                    }
                },
                mounted: function () {
                    this.categoryFullName = this.category.fullname;

                    this.aggregation = this.category.aggregation;
                },
                methods: {
                    setAggretation(aggregation) {
                        this.aggregation = aggregation;
                    },
                    changeAggregation(aggregation) {
                        this.aggregation = aggregation;
                    },
                    updateCategory() {
                        this.$store.dispatch(
                            g_store.actions.UPDATE_CATEGORY,
                            {
                                ...this.category,
                                fullname: this.categoryFullName,
                                aggregation: this.aggregation,
                                aggregationcoef: 50
                            })
                            .then(()=> {
                                this.$emit(graderVueEvents.UPDATE_CATEGORY_OK);
                            })
                            .catch( ()=> {
                                this.$toasted.show('Ha habido un error guardando la categoria', {duration: 3000, theme:'bubble'});
                            });
                    }
                }
            }
        );
        var CloseModalButton = Vue.component('close-modal-button', {
            template: `
        <i class="fa fa-2x fa-times-circle" v-bind:style="closeButtonStyle"  @click="$modal.hide(modalName)"></i>
        `,
            props: {
                modalName: {
                    type: String,
                    required: true
                }
            },
            data: function() {
                return {
                    closeButtonStyle: {
                        position: "absolute",
                        top: "10px",
                        right: "10px"
                    }
                }
            }
        });
        var ModalAddElement = Vue.component('modal-add-element', {
            template: `
       <modal 
        v-bind:name="modalName"
        v-bind:transition="'nice-modal-fade'"
        :draggable="true"
        >
            <add-element-form v-on:addElementOK="$modal.hide(modalName)"></add-element-form>
            <close-modal-button v-bind:modalName="modalName"></close-modal-button>
       </modal>
       `,
            data: function() {
                return {
                    modalName: modalsEnum.ADD_ELEMENT
                }
            }
        });
        var ModalEditCategory = Vue.component('modal-edit-category',{
            template: `<modal
                    v-bind:name="modalName" 
                    v-bind:transition="'nice-modal-fade'"
                    :draggable="true"
                    >
                        <edit-category-form   v-on:updateCategoryOK="$modal.hide(modalName)"></edit-category-form>
                        <close-modal-button v-bind:modalName="modalName"></close-modal-button>
                   </modal>
       `,
            data: function () {
                return {
                    modalName: modalsEnum.EDIT_CATEGORY
                }
            }
        });

        var AddElementForm = Vue.component('add-element-form',{
            template: `
        <div class="add-element-form">
           <form>
           <h2 :style="{ 'text-align': 'center' }">Añadir elemento</h2>
           <label></label>
           <select id="elementType" v-model="elementTypeId">
               <option v-for="elementType in elementTypes" v-bind:value="elementType.id">
                {{elementType.name}}
               </option>
           </select>
            <br/>
           <label :style="{ 'text-align': 'center' }" for="elementName">
            Nombre del elemento:
            </label>
            <input id="elementName" v-model="elementName">
           <br />
            <template v-if="parentCategory.aggregation == weigthedMeanOfGrades">
                <label for="elementAggregationCoef">
                    Peso: 
                </label>
                        <input 
            placeholder="Ingrese un valor entre 1 y 100" 
            id="elementAggregationCoef" 
            v-model="elementAggregationCoef" type="number"
            v-on:keypress="isNumber($event)">
            </template>
            <br/>
            <template v-if="elementTypeId === categoryElementTypeId || elementTypeId === partialExamElementId">
                <label >
                    Tipo de agregación
                </label>
                <select-aggregation
                    v-bind:changeAggregation="changeAggregation"
                />
            </template>
            <br />
            <div style="text-align:center">
                <button :style="boton" type="button" v-on:click="createElement()">Añadir</button>
            </div>
           </form>
       </div>
       `,
            data : function () {
                return {
                    boton: {
                        'background-color': '#cd1f32',
                        'color': 'white'
                    },
                    elementTypes: elementTypes,
                    categoryElementTypeId: categoryElement.id,
                    partialExamElementId: partialExamElement.id,
                    elementTypeId: itemElement.id,
                    elementName: '',
                    aggregation: g_enums.aggregations.SIMPLE,
                    elementAggregationCoef: ''
                }
            },
            computed: {
                ...Vuex.mapState(['selectedCategoryId', 'course']),
                ...Vuex.mapGetters(['selectedCategory']),
                parentCategory: function () {
                    return this.selectedCategory;
                },
                weigthedMeanOfGrades: function () {
                    return g_enums.aggregations.PROMEDIO;
                }
            },
            methods: {
                isNumber: function(evt) {
                    evt = (evt) ? evt : window.event;
                    var charCode = (evt.which) ? evt.which : evt.keyCode;
                    if ((charCode > 31 && (charCode < 48 || charCode > 57)) && charCode !== 46) {
                        evt.preventDefault();
                    } else {
                        return true;
                    }
                },
                changeAggregation(aggregation) {
                    this.aggregation = aggregation;
                },
                extractItem() {
                    return {
                        itemname: this.elementName,
                        aggregationcoef: this.elementAggregationCoef,
                        parent_category: this.parentCategory.id,
                        courseid: this.course.id,
                    };
                },
                extractPartialExam() {
                    return {
                        itemname: this.elementName,
                        aggregationcoef: this.elementAggregationCoef,
                        parent_category: this.parentCategory.id,
                        courseid: this.course.id,
                        aggregation: this.aggregation
                    };
                },
                extractCategory() {
                    return {
                        fullname: this.elementName,
                        courseid: this.course.id,
                        parent_category: this.parentCategory.id,
                        aggregation: this.aggregation
                    };
                },
                createItem() {
                    const item = this.extractItem();
                    this.$store.dispatch(g_store.actions.ADD_ITEM, item)
                        .then(()=> {
                            this.$emit(graderVueEvents.ADD_ELEMENT_OK);
                            this.$toasted.show(
                                `Se ha añadido el item '${item.itemname}'`,
                                { duration : 3000, icon: 'fa fa-check'});
                            this.$router.go();
                        })
                        .catch(() => {
                            this.$toasted.show(
                                'Ha ocurrido un error guardando el nuevo item.',
                                {duration: 3000, theme: 'bubble'}
                            )
                        })
                },
                /* examen parcial */
                createCoursePartialExam() {
                    const partialExam = this.extractPartialExam();
                    this.$store.dispatch(g_store.actions.ADD_PARTIAL_EXAM,  partialExam)
                        .then(()=> {
                            this.$emit(graderVueEvents.ADD_ELEMENT_OK);
                            this.$toasted.show(
                                `Se ha añadido el parcial '${partialExam.itemname}'`,
                                { duration : 3000, icon: 'fa fa-check'});
                            this.$router.go();
                        })
                        .catch(() => {
                            this.$toasted.show(
                                'Ha ocurrido un error guardando el nuevo parcial.',
                                {duration: 3000, theme: 'bubble'}
                            )
                        })
                },
                createCategory() {
                    const category = this.extractCategory();
                    const payload = {category, weight: this.elementAggregationCoef};
                    this.$store.dispatch(g_store.actions.ADD_CATEGORY, payload)
                        .then(()=>{
                            this.$emit(graderVueEvents.ADD_ELEMENT_OK);
                            this.$toasted.show(
                                `Se ha añadido la categoria '${category.fullname}'`,
                                { duration : 3000, icon: 'fa fa-check'});
                            this.$router.go();
                        })
                        .catch(() => {
                            this.$toasted.show(
                                'Ha ocurrido un error guardando la nueva categoria.',
                                {duration: 3000, theme: 'bubble'}
                            )
                        })
                },
                createElement() {
                    if (this.elementTypeId === itemElement.id) {
                        this.createItem();
                    } else if(this.elementTypeId === categoryElement.id) {
                        this.createCategory();
                    } else if(this.elementTypeId === partialExamElement.id) {
                        this.createCoursePartialExam();
                    }
                }
            }

        });
        var ItemMiniMenu = Vue.component('item-mini-menu', {
                template: `
                <div>
                    <i class="fa fa-trash" v-on:click="showDeleteItemDialog()"></i>
                </div>
            `,
                props: ['itemId'],
                methods: {
                    deleteItem(){
                        return this.$store.dispatch(g_store.actions.DELETE_ITEM, this.itemId)
                            .then(()=> {
                                this.$toasted.show('Se ha borrado el item', {duration: 3000});
                                this.$router.go();
                            })
                            .catch(()=> {
                                this.$toasted.
                                show('Ha habido un error al borrar el item, no se ha borrado', {duration: 3000, theme:'bubble'});
                            });
                    },
                    showDeleteItemDialog() {
                        this.$modal.show('dialog', {
                            title: 'Eliminación de item',
                            text: 'Estas a punto de eliminar un item',
                            buttons: [
                                {
                                    title: 'Borrar',
                                    handler: () => {
                                        this.deleteItem()
                                            .finally(()=>this.$modal.hide('dialog'));
                                    }
                                },
                                {
                                    title: 'Cancelar'
                                }
                            ]
                        })
                    },
                }
            }
        );
        var CategoryMiniMenu = Vue.component('category-mini-menu', {
                template: `
                <div class ="category-mini-menu" v-bind:style="style">
                    <i class="fa fa-edit" v-on:click="showEditDialog"></i>
                    <i class="fa fa-plus" v-on:click="showAddElementDialog"></i>
                    <i class="fa fa-trash" v-show="showDelete"" v-on:click="showDeleteElementDialog"></i>
                </div>
            `,
                props: {
                    categoryId: [Number, String],
                    showDelete : {
                        type: Boolean,
                        required: false,
                        default: true
                    },
                    allowEditName : {
                        type: Boolean,
                        required: false,
                        default: true
                    }
                },
                data: function () {
                    return {
                        style: {
                            display: "grid",
                            gridTemplateColumns: "repeat(3, max-content)",
                            gridColumnGap: "8px"
                        }
                    }
                },
                computed: {
                    ...Vuex.mapGetters([
                        'categoryById'
                    ]),
                    category: function () {
                        return this.categoryById(this.categoryId);
                    },
                },
                methods: {
                    deleteCategory(){
                        return this.$store.dispatch(g_store.actions.DELETE_CATEGORY, this.categoryId)
                            .then(()=> {
                                this.$toasted.show('Se ha borrado la categoria', {duration: 3000});
                                this.$router.go();
                            })
                            .catch(()=> {
                                this.$toasted.
                                show('Ha habido un error al borrar la categoria, no se ha borrado', {duration: 3000, theme:'bubble'});
                            });
                    },
                    showDeleteElementDialog() {
                        this.$modal.show('dialog', {
                            title: 'Eliminación de categoria',
                            text: 'Estas a punto de eliminar una categoria',
                            buttons: [
                                {
                                    title: 'Borrar',
                                    handler: () => {
                                        this.deleteCategory()
                                            .finally(()=>this.$modal.hide('dialog'));
                                    }
                                },
                                {
                                    title: 'Cancelar'
                                }
                            ]
                        })
                    },
                    showEditDialog() {
                        this.$store.commit(
                            g_store.mutations.SET_SELECTED_CATEGORY_ID,
                            this.category.id);
                        this.$modal.show(modalsEnum.EDIT_CATEGORY);
                    },
                    showAddElementDialog() {
                        this.$store.commit(
                            g_store.mutations.SET_SELECTED_CATEGORY_ID,
                            this.category.id);
                        this.$modal.show(modalsEnum.ADD_ELEMENT);
                    }
                }
            }
        );
        var ThCourse = Vue.component ('th-course', {
            template: `
            <th 
            v-bind:colspan="colspan"
            @mouseover="showMenu = true"
            @mouseout="showMenu = false"
            >
           
                <flex-row align-v="center" v-bind:style="editZoneStyles" >
                    <span class="gradeitemheader">        
                    {{course.fullname}}       
                    </span>
                    <category-mini-menu v-bind:showDelete="false" v-bind:categoryId="category.id"  v-show="showMenu"></category-mini-menu>
                </flex-row> 
                </th>
            </th>
       `,
            props: ['colspan'],
            data: function () {
                return {
                    showMenu: false,
                    editZoneStyles: {
                        display: 'grid',
                        gridTemplateColumns: 'repeat(2, max-content)',
                        gridColumnGap: '5px'
                    }
                }
            },
            computed: {
                ...Vuex.mapState(['course']),
                ...Vuex.mapGetters(['courseLevel', 'categoryById']),
                courseCategoryId: function () {
                    return this.courseLevel.object.id;
                },
                category: function () {
                    return this.categoryById(this.courseCategoryId)
                }
            }

        });
        var CourseMiniMenu = Vue.component('course-mini-menu', {
                template: `
                <div v-bind:style="style">
                    <i class="fa fa-plus" v-on:click="showAddElementDialog"></i>
                </div>
            `,
                props: ['categoryId'],
                data: function () {
                    return {
                        style: {
                            display: "grid",
                            gridTemplateColumns: "repeat(3, max-content)",
                            gridColumnGap: "8px"
                        }
                    }
                },
                computed: {
                    ...Vuex.mapGetters([
                        'categoryById'
                    ]),
                    category: function () {
                        return this.categoryById(this.categoryId);
                    },
                },
                methods: {
                    showAddElementDialog() {
                        this.$store.commit(
                            g_store.mutations.SET_SELECTED_CATEGORY_ID,
                            this.category.id);
                        this.$modal.show(modalsEnum.ADD_ELEMENT);
                    }
                }
            }
        );
        var ThCategory = Vue.component('th-category', {
            template : `    
            <th
            :title="category.fullname"
            class="th-category"
            @mouseover="showMenu = true"
            @mouseout="showMenu = false" 
            v-bind:colspan="childSize" >
                <flex-row align-v="center"  v-bind:style="editZoneStyles">
                    <input v-model="catName" :class="getCatClass" @focus="catFocus" @blur="catBlur" @keyup.enter="$event.target.blur()"></input>
                    <input
                     v-model="catWeight" 
                     :class="catGetWeightClass"
                     @focus="catWFocus" @blur="catWBlur"
                     @keyup.enter="$event.target.blur()"
                     v-if="parentCategory.aggregation == weightedAggregation"
                     v-on:keypress="isNumber($event)"
                     ></input>
                    <category-mini-menu v-bind:categoryId="category.id" v-show="showMenu"></category-mini-menu>
                </flex-row>
            </th>
       `,
            created() {
                let text = this.category.fullname;
                let length = 30;
                let clamp = '...';
                let node = document.createElement('div');
                node.innerHTML = text;
                let content = node.textContent;
                this.catName = content.length > length ? content.slice(0, length) + clamp : content;
                this.catWeight = this.$options.filters.round(this.aggregationCoef, 2) + '%';
            },
            props: ['element'],
            data: function() {
                return {
                    showFullName: false,
                    getCatClass: 'catnotfocused',
                    catGetWeightClass: 'catwnotfocused',
                    catName: "",
                    catWeight: "",
                    editZoneStyles: {
                        'max-height': '45px'
                    },
                    showMenu: false
                }
            },
            computed: {
                ...Vuex.mapGetters([
                    'categoryById',
                    'categoryChildSize'
                ]),
                ...Vuex.mapState(['items']),
                category: function() {
                    return this.categoryById(this.element.object.id);
                },
                childSize: function () {
                    return this.categoryChildSize(this.category.id);
                },
                categoryGradeItem: function () {
                    return this.items[this.category.grade_item];
                },
                aggregationCoef: function () {
                    return this.categoryGradeItem.aggregationcoef;
                },
                parentCategory: function() {
                    return this.categoryById(this.category.parent);
                },
                weightedAggregation : function () {
                    return g_enums.aggregations.PROMEDIO
                }
            },
            methods: {
                isNumber: function(evt) {
                    evt = (evt) ? evt : window.event;
                    var charCode = (evt.which) ? evt.which : evt.keyCode;
                    if ((charCode > 31 && (charCode < 48 || charCode > 57)) && charCode !== 46) {
                        evt.preventDefault();
                    } else {
                        return true;
                    }
                },
                catFocus: function (){
                    //this.length = 17;
                    this.getCatClass = 'catwithfocus';
                    this.showFullName = true;
                    this.uptadeCatName();
                },
                catBlur: function (){
                    //this.length = 19;
                    this.getCatClass = 'catnotfocused';
                    this.showFullName = false;
                    this.updateCategoryName();
                },
                catWFocus: function (){
                    this.catGetWeightClass = 'catwwithfocus';
                    this.showFullName = true;
                    this.updateWeight();
                },
                catWBlur: function (){
                    this.catGetWeightClass = 'catwnotfocused';
                    this.showFullName = false;
                    this.saveAggregationCoef();
                },
                updateCategoryName: function () {
                    this.$store.dispatch(
                        g_store.actions.UPDATE_CATEGORY,
                        {...this.category, fullname: this.catName})
                },
                saveAggregationCoef: function() {
                    this.$store.dispatch(g_store.actions.UPDATE_ITEM,
                        {...this.categoryGradeItem, aggregationcoef: this.catWeight})

                },
                uptadeCatName: function(){
                    if(this.showFullName){
                        this.catName = this.category.fullname;
                    }else{
                        this.catName = this.$options.filters.trunc(this.category.fullname, 30);
                    }
                },
                updateWeight: function(){
                    this.catWeight = this.$options.filters.round(this.aggregationCoef, 2);
                    if(this.catGetWeightClass === 'catwnotfocused'){
                        this.catWeight += '%';
                    }
                }
            }
        });

        var ItemActionsMini = Vue.component('item-actions-mini', {
            template:`
        
        `,
            props: ['itemId']
        });
        var ThStudentNames = Vue.component('th-student-names', {
            template: `
       <th class="th-student-names" :style="stickyStyles"> 
           <flex-row>
               <a v-on:click="changeOrderToLastame()">Apellidos</a> 
               <span>/ </span>
               <a v-on:click="changeOrderToName">Nombres</a>
           </flex-row> 
       </th>
       `,
            data: function () {
                return {
                    lastNameDirectionAsc: true,
                    firstNameDirectionAsc: true,
                    stickyStyles: {
                        position: 'sticky',
                        top: '0',
                        left: '0',
                        'background-clip': 'padding-box',
                        'z-index': '999999'
                    }
                }
            },
            methods: {
                changeOrderToLastame() {

                    this.$store.commit(
                        g_store.mutations.SET_STUDENT_SORT_METHOD,
                        {
                            name: g_enums.sortStudentMethods.LAST_NAME,
                            order: this.lastNameDirectionAsc? g_enums.sortDirection.ASC : 'desc'
                        });
                    this.lastNameDirectionAsc = !this.lastNameDirectionAsc;
                },
                changeOrderToName() {
                    this.$store.commit(
                        g_store.mutations.SET_STUDENT_SORT_METHOD,
                        {
                            name: g_enums.sortStudentMethods.FIRST_NAME,
                            order: this.firstNameDirectionAsc? g_enums.sortDirection.ASC : 'desc'
                        });
                    this.firstNameDirectionAsc = !this.firstNameDirectionAsc;
                }
            }

        });
        var TrItems = Vue.component('tr-items', {
            template : `
                    <tr class="tr-items">
                    <th-student-names></th-student-names>
                    <th colspan="1" v-for="additionalColumnAtFirst in additionalColumnsAtFirst" v-show="!additionalColumnAtFirst.hide">{{additionalColumnAtFirst.text}}</th>
                    <template v-for="(itemId, index) in orderedItemIds">       
                        <th-item-category 
                        v-if="items[itemId].itemtype === 'category'" 
                        v-bind:itemId="items[itemId].id" 
                        v-bind:colspan="1"
                        :style="stickyStyles"
                        ></th-item-category> 
                        
                        <th-item-manual-and-mod 
                        v-if="items[itemId].itemtype === 'manual' || items[itemId].itemtype === 'mod'"  
                        v-bind:itemId="items[itemId].id" 
                        ></th-item-manual-and-mod>
                     </template>
                     <th colspan="1" v-for="additionalColumnAtEnd in additionalColumnsAtEnd">{{additionalColumnAtEnd.text}}</th>
                     </tr>
   `,
            computed: {
                ...Vuex.mapGetters({
                    orderedItemIds: 'itemOrderIds'
                }),
                ...Vuex.mapState([
                    'additionalColumnsAtFirst',
                    'additionalColumnsAtEnd',
                    'items'
                ])
            },

            data: function () {
                return {
                    stickyStyles: {
                        /*position: 'sticky',
                        top: '0',
                        'z-index': 4032,*/
                        //'background-color': '#ffffff'
                    },
                }
            },
        });
        Vue.component('editable',{
            template: `<div contenteditable="true" @blur="update">{{content}}<span>{{sufix}}</span></div>`,
            props:['content', 'sufix'],
            methods:{
                getContent: function (event) {
                    return event.target.innerText.replace(this.sufix, '');
                },
                update:function(event){
                    this.$emit('update', this.getContent(event));
                }
            }
        });

        var ThItemManualAndMod = Vue.component('th-item-manual-and-mod', {
            template : `         
                <th class="th-item-manual-and-mod"
                v-cloak
                 @mouseover="showMenuItems = true"
                 @mouseout="showMenuItems = false"
                 :title="item.itemname"
                ><!--v-on:click="deleteItem(item.id)"-->
                <flex-row v-bind:style="editZoneStyles" align-v="center">
                    <input v-model="content" :class="getClass" @focus="focus" @blur="blur" @keydown.enter="saveNameChanges" @keyup.enter="$event.target.blur()"></input>
                    <input
                     v-model="weight" 
                     :class="getWeightClass"
                     @focus="wfocus" @blur="wblur"
                     @keyup.enter="$event.target.blur()"
                     v-if="parentCategory.aggregation == weightedAggregation"
                     v-on:keypress="isNumber($event)"
                     ></input>
                    <item-mini-menu v-show="showMenuItems" v-bind:itemId="item.id"></item-mini-menu>
                </flex-row>
                </th>
   `,       created() {
                let text = this.item.itemname;
                let length = 18;
                let clamp = '...';
                let node = document.createElement('div');
                node.innerHTML = text;
                let contente = node.textContent;
                this.content = contente.length > length ? contente.slice(0, length) + clamp : contente;
                this.weight = this.$options.filters.round(this.item.aggregationcoef, 2) + '%';
            },
            data: function () {
                return {
                    showMenuItems: false,
                    showFullName: false,
                    getClass: 'inotfocused',
                    getWeightClass: 'iwnotfocused',
                    content: "",
                    weight: 0,
                    //length: 19,
                    editZoneStyles: {
                        /*display: 'grid',
                        gridTemplateColumns: 'repeat(3, max-content)',
                        gridColumnGap: '5px',*/
                        'max-height': '20px'
                    },
                }
            },
            props: ['itemId'],
            methods: {
                isNumber: function(evt) {
                    evt = (evt) ? evt : window.event;
                    var charCode = (evt.which) ? evt.which : evt.keyCode;
                    if ((charCode > 31 && (charCode < 48 || charCode > 57)) && charCode !== 46) {
                        evt.preventDefault();
                    } else {
                        return true;
                    }
                },
                focus: function (){
                    //this.length = 17;
                    this.getClass = 'iwithfocus';
                    this.showFullName = true;
                    this.uptadeContent();
                },
                blur: function (){
                    this.getClass = 'inotfocused';
                    this.showFullName = false;
                    if (this.content !== this.item.itemname) {
                        this.saveNameChanges()
                    }else{
                        this.uptadeContent();
                    }
                },
                wfocus: function (){
                    this.getWeightClass = 'iwwithfocus';
                    this.updateWeight();
                },
                wblur: function (){
                    this.getWeightClass = 'iwnotfocused';
                    if (parseFloat(this.weight) !== parseFloat(this.item.aggregationcoef)){
                        this.saveAggregationCoefChanges();
                    }else {
                        this.updateWeight();
                    }
                },
                ...Vuex.mapActions({
                    deleteItem: g_store.actions.DELETE_ITEM
                }),
                saveNameChanges:function () {

                    this.$store.dispatch(
                        g_store.actions.UPDATE_ITEM,
                        {...this.item, itemname: this.content}
                    );
                    /*                        this.$store.dispatch(
                                                g_store.actions.UPDATE_ITEM,
                                                {...this.item, itemname: this.content}
                                            );*/
                },
                saveAggregationCoefChanges: function() {
                    this.$store.dispatch(
                        g_store.actions.UPDATE_ITEM,
                        {...this.item, aggregationcoef: this.weight}
                    )
                },
                uptadeContent: function(){
                    console.log('update');
                    if(this.showFullName){
                        this.content = this.item.itemname;
                    }else{
                        let text = this.item.itemname;
                        let length = 18;
                        let clamp = '...';
                        let node = document.createElement('div');
                        node.innerHTML = text;
                        let content = node.textContent;
                        this.content = content.length > length ? content.slice(0, length) + clamp : content;
                    }
                },
                updateWeight: function(){
                    console.log(this.item.aggregationcoef);
                    this.weight = this.$options.filters.round(this.item.aggregationcoef, 2);
                    if(this.getWeightClass === 'iwnotfocused'){
                        this.weight += '%';
                    }
                }
            },

            computed: {
                ...Vuex.mapState([
                    'items'
                ]),
                ...Vuex.mapGetters(['categoryById']),
                item: function () {
                    return this.items[this.itemId];
                },
                parentCategory: function () {
                    return this.categoryById(this.item.categoryid)
                },
                weightedAggregation: function (){
                    return g_enums.aggregations.PROMEDIO;
                },
                /*content: function () {
                    if(this.showFullName){
                        return this.item.itemname;
                    }else{
                        let text = this.item.itemname;
                        let length = 18;
                        let clamp = '...';
                        let node = document.createElement('div');
                        node.innerHTML = text;
                        let content = node.textContent;
                        return content.length > length ? content.slice(0, length) + clamp : content;
                    }
                }*/
            }
        });

        var ThItemCategory = Vue.component('th-item-category', {
            template : `         
                <th class="th-item-category"v-bind:colspan="colspan"
                 :title="itemName">
                            {{itemName | trunc(20, '...')}}
                </th>
   `,
            props: ['itemId', 'colspan'],
            computed: {
                ...Vuex.mapState([
                    'items'
                ]),
                ...Vuex.mapGetters([
                    'categoryById'
                ]),
                item: function () {
                    return this.items[this.itemId];
                },
                categoryParent: function() {
                    return this.categoryById(this.item.iteminstance);
                },
                itemName: function() {
                    return 'TOTAL ' + this.categoryParent.fullname;
                }
            },
        });

        var ThStudent = Vue.component('th-student',
            {
                // language=HTML
                template: `
                <th class="th-student"scope="row" v-bind:style="stickyStyles">
                    {{studentFullName}}
                </th>
                `,
                props: ['studentId'],
                computed: {
                    ...Vuex.mapGetters([
                        'studentById'

                    ]),
                    ...Vuex.mapGetters({
                        students: 'studentSet'
                    }),
                    student: function() {
                        return this.studentById(this.studentId);
                    },
                    studentFullName: function() {
                        return this.student.lastname + ' ' + this.student.firstname;
                    }
                },

                data: function () {
                    return {
                        stickyStyles: {
                            position: 'sticky',
                            left: '0',
                            'background-clip': 'padding-box',
                            'min-width': '400px!important'
                            //'z-index': 999999,
                            //'background-color': '#ffffff'
                        },
                    }
                },
            });
        var TdGrade = Vue.component('td-grade',
            {
                template: `
                <td  class="td-grade"
                v-bind:style="this.inputDisabled? { 'background-color': '#e1e4fe' } : { }"> 
                <!--{{item.itemtype}}-->
                <input 
                class="grade-input"
                v-bind:disabled="inputDisabled" 
                type="number"
                v-bind:tabindex="tabIndex" 
                v-bind:step="step"  
                v-bind:max="grade.rawgrademax" 
                v-bind:min="grade.rawgrademin" 
                v-bind:size="decimalPlaces + 1"
                v-on:keypress="isNumber($event)"
                v-model.lazy="finalGrade">
                </td>
                `,
                props: ['gradeId', 'studentIndex', 'itemIndex'],
                methods: {
                    ...Vuex.mapActions({
                        updateGrade: g_store.actions.UPDATE_GRADE
                    }),
                    isNumber: function(evt) {
                        evt = (evt) ? evt : window.event;
                        var charCode = (evt.which) ? evt.which : evt.keyCode;
                        if ((charCode > 31 && (charCode < 48 || charCode > 57)) && charCode !== 46) {
                            evt.preventDefault();
                        } else {
                            return true;
                        }
                    }
                },
                computed: {

                    ...Vuex.mapState([
                        'grades',
                        'items',
                        'course',
                        'decimalPlaces'
                    ]),
                    step: function() {
                        return Math.pow(10, -this.decimalPlaces);
                    },
                    ...Vuex.mapGetters([
                        'studentsCount'
                    ]),
                    tabIndex: function() {
                        return (this.itemIndex + 1) * this.studentsCount +  this.studentIndex + 1;
                    },
                    inputDisabled: function () {

                        return this.item.itemtype==='category' || this.item.itemtype==='course' ;
                    },
                    grade: function() {
                        return this.grades[this.gradeId];
                    },
                    item: function () {
                        return this.items[this.grade.itemid];
                    },
                    finalGrade: {
                        get() {
                            console.log("getFInal");
                            return g_utils.round(this.grade.finalgrade, this.decimalPlaces);
                        },
                        set(value) {
                            console.log("setFinal");
                            this.grade.finalgrade = value;
                            this.updateGrade(this.grade, this.course.id);
                        }
                    }
                }

            });
        var TrGrades = Vue.component('tr-grades',
            {
                template: `
                <tr 
                v-bind:class="{is_ases: student.is_ases}" 
                v-bind:title="student.is_ases? 'El estudiante pertenece al programa ASES' : ''"
                >
                    <th-student v-bind:studentId="student.id"></th-student>
                    <td >{{student.username}}</td>
                    <td-grade 
                    v-for="(gradeId, index) in studentGradeIdsOrdered" 
                    :key="gradeId"
                    v-bind:studentIndex="studentIndex"
                    v-bind:itemIndex="index"
                    v-bind:gradeId="gradeId"
                    >
                    </td-grade>
                   
                </tr>
                `,
                props: ['studentId', 'studentIndex'],
                computed: {
                    ...Vuex.mapState([
                        'students',
                        'grades'
                    ]),
                    ...Vuex.mapGetters([
                        'itemOrderIds'
                    ]),
                    student: function() {
                        return this.students[this.studentId];
                    },
                    /**
                     * Return the student grades ordered in the same order
                     * than `itemOrderIds`
                     * see g_store.sate.getters.itemOrderIds
                     */
                    studentGradeIdsOrdered: function() {
                        return g_utils.
                        orderGradeIdsInItemSetOrder(
                            this.student.gradeIds,
                            this.grades,
                            this.itemOrderIds
                        );
                    }
                }
            }
        );

        var PopUpWeight = Vue.component('popup-weight',
            {
                template: `
                <div id="page-content" class="row pb-3 d-print-block">
            <div id="region-main-box" class="col-12">

                <section id="region-main">
                    <div class="card">
                        <div class="card-body">
                            
                            <span class="notifications" id="user-notifications"></span>
                            <div role="main"><span id="maincontent"></span><div data-rel="fatalerror" class="box py-3 errorbox alert alert-warning">
                                            <p class="errormessage">Advertencia: El total de los porcentajes dentro de una categoria o curso no suman 100, moodle los tomará como peso en vez de porcentaje</p>
                                            <p class="errorcode"><a href="https://docs.moodle.org/311/en/Grade_aggregation#Weighted_mean" target="_blank">Mas informacion sobre esta advertencia</a></p></div>
                                            <div class="continuebutton">
    
</div></div>
                            
                            
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
                `,
            }
        );




        /* var Bar = Vue.component('VBar', {
             mixins: [g_chartjs.Bar, g_vuechartjs.Bar],
             props: {
                 chartdata: {
                     type: Object,
                     default: null
                 },
                 options: {
                     type: Object,
                     default: null
                 }
             },
             mounted () {
                 this.renderChart(this.chartdata, this.options)
             }
         });*/

        /** Filter registry */
        Vue.filter (g_filters.round.name, g_filters.round.func);
        Vue.filter (g_filters.trun.name, g_filters.trun.func);

        var router = new VueRouter({
            routes: g_router.routes
        });
        var app = new Vue({
            store: store,
            router: router,
            components: {
                ThCourse,
                EditCategoryForm,
                ThCategory,
                TrItems,
                ThItemManualAndMod,
                PopUpWeight
            }
        });
        return {
            init: function() {

                app.$mount('#app');

                $(document).ready(function() {
                });
            }
        };
    }
);
